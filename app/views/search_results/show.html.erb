<%
  tu = @searched_tw_user
  rendered_users = []
  icon_limit = request.from_pc? ? 8 : 3
  default_locals = {rendered_users: rendered_users, icon_limit: icon_limit, tu: tu}
  fragment_cache_ttl = 10.seconds
%>

<script>
  $(function () {
    window.lazycall_functions = {};
  });
</script>

<% cache "#{tu.cache_key}/close_friends", expires_in: fragment_cache_ttl do %>
  <%= render partial: 'search_results/show/users_summary', locals: {name: 'close_friends'}.merge(default_locals) %>
<% end %>

<% cache "#{tu.cache_key}/usage_stats", expires_in: fragment_cache_ttl do %>
  <%= render partial: 'search_results/show/stats_summary', locals: {name: :usage_stats, graph: @graph_wday, tu: tu} %>
<% end %>

<% cache "#{tu.cache_key}/tweet_clusters", expires_in: fragment_cache_ttl do %>
  <%= render partial: 'search_results/show/stats_summary', locals: {name: :clusters_belong_to, graph: name_y_format(@tweet_clusters), tu: tu} %>
<% end %>

<% %w(removing removed new_friends new_followers blocking_or_blocked mutual_friends one_sided_friends one_sided_followers replying replied favoriting inactive_friends inactive_followers).each do |name| %>
  <% if name == 'new_friends' && request.from_smartphone? %>
    <%= render(partial: 'common/adsense', locals: {action: action_name, vertical: :middle}) %>
  <% end %>

  <% cache "#{tu.cache_key}/#{name}", expires_in: fragment_cache_ttl do %>
    <%= render partial: 'search_results/show/users_summary', locals: {name: name}.merge(default_locals) %>
  <% end %>
<% end %>

<% cache "#{tu.cache_key}/modals", expires_in: fragment_cache_ttl do %>
  <%= render(partial: 'profiles/modal', collection: rendered_users.uniq { |user| user.uid.to_i }, as: :user, cached: true, locals: {twitter_user: tu, via: :profile_modal}) %>
<% end %>

<script>
  $(function () {
    enableSlickOnModal();
    setModalOpenLogger('profile', '<%= modal_open_logs_path %>');
  });
</script>

<% cache "#{tu.cache_key}/update_histories", expires_in: fragment_cache_ttl do %>
  <%= render partial: 'search_results/show/update_histories_summary', locals: {histories: UpdateHistories.new(tu.uid), tu: tu} %>
<% end %>

<script>
  $(function () {
    $.each(Object.keys(window.lazycall_functions), function (i, selector) {
      var loaded = false;
      $(selector)
          .lazyload()
          .on('appear', function () {
            if (loaded) return;
            loaded = true;

            window.lazycall_functions[selector]();
          });
    });
  });
</script>

<%= render(partial: 'common/adsense', locals: {action: action_name, vertical: :bottom}) %>

<h2 class="h4"><%= t('search_results.show.about_this_page', this_page: t('searches.show.heading', user: tu.mention_name)) %></h2>
<div class="this-page-is"><%= t('search_results.show.this_page_is_html', user: tu.mention_name) %></div>

<h2 class="h4"><%= t('search_results.show.other_services') %></h2>
<div class="row other-services">
  <div class="text-center col-xs-12 col-sm-4">
    <%= t('search_results.show.twitter_link_html', screen_name: tu.screen_name) %>
    <div class="tooltip-container"><abbr title="Twitter" rel="tooltip">i</abbr></div>
  </div>
  <div class="text-center col-xs-12 col-sm-4">
    <%= t('search_results.show.twilog_link_html', screen_name: tu.screen_name) %>
    <div class="tooltip-container"><abbr title="Twilog" rel="tooltip">i</abbr></div>
  </div>
  <div class="text-center col-xs-12 col-sm-4">
    <%= t('search_results.show.favstar_link_html', screen_name: tu.screen_name) %>
    <div class="tooltip-container"><abbr title="Favstar" rel="tooltip">i</abbr></div>
  </div>
</div>

<script>
  $(function () {
    tooltip();

    var twitterUser = <%= raw({uid: tu.uid, screenName: tu.screen_name, createdAt: tu.created_at.to_i}.to_json) %>;

    function formatDate (date) {
      return '' + date.getFullYear() + '/' + date.getMonth() + 1 + '/' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
    }

    function deletePageCacheAndReload(e) {
      e.preventDefault();
      e.stopPropagation();

      new egotter.PageCache().delete(twitterUser.uid)
          .then(function () {
            console.log('reload started', formatDate(new Date()));
            window.location.reload();
          })
          .fail(function (xhr) {
            console.log('delete failed');
            console.log(xhr.responseText);
          });

      return false;
    }

    $('.reload-btn').on('click', deletePageCacheAndReload);

    if (window.workerStarted) {
      var refreshBox = $('.refresh-box');
      var latestBox = $('.latest-box');
      var loginBox = $('.login-box');

      refreshBox.find('a').on('click', deletePageCacheAndReload);

      function done (res) {
        console.log('before', formatDate(new Date(twitterUser.createdAt * 1000)), ', after', formatDate(new Date(res.created_at * 1000)));

        if (twitterUser.createdAt < res.created_at) {
          new egotter.PageCache().delete(twitterUser.uid);
          refreshBox.show();
          refreshBox.sticky({topSpacing: 0});
        } else {
          if (res.message == 'already created and too many friends') {
            // TODO check whether the user is signed in or not
            loginBox.show();
          } else {
            latestBox.show();
          }
        }
      }

      waiting2(twitterUser, done);
    }
  });
</script>
