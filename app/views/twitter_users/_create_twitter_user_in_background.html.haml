- button_classes = 'btn btn-outline-primary'

= alert_info_box('update-this-page-box') do |id, via|
  %span.next-creation-note= ''
  = link_to(t('twitter_users.in_background.reload_page'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_info_box('request-to-update-box') do |id, via|
  %span.next-creation-note= ''
  = link_to(t('twitter_users.in_background.request_to_update'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_warning_box('failed-box') do |id, via|
  %span= t('twitter_users.in_background.failed')
  = link_to(t('twitter_users.in_background.reload_page'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_info_box('refresh-box') do |id, via|
  %span.message= t('twitter_users.show.update_is_coming', user: twitter_user.screen_name)
  = link_to(t('twitter_users.in_background.reload_page'), timeline_path(twitter_user, via: via), class: button_classes)

= alert_info_box('too-many-friends-box') do |id, via|
  = t('twitter_users.in_background.too_many_friends', user: twitter_user.screen_name)
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

- if user_signed_in?
  = alert_warning_box('follow-box') do |id, via|
    - url = sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via), follow: true)
    = t('twitter_users.in_background.automated_update_stopped_html', user: current_user.screen_name, url: url)

= alert_info_box('just-followed-box') do |id, via|
  = t('twitter_users.in_background.automated_update_restarted_html')

= alert_warning_box('not-followed-box') do |id, via|
  - url = sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via), follow: true)
  = t('twitter_users.in_background.automated_update_not_restarted_and_signing_in_html', url: url)

= alert_warning_box('invalid-token-box') do |id, via|
  = t('twitter_users.in_background.invalid_token', user: twitter_user.screen_name)
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_warning_box('accurate-counting-box') do |id, via|
  = t('twitter_users.in_background.accurate_counting')
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_warning_box('via-dm-box') do |id, via|
  = t('twitter_users.in_background.via_dm')
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_info_box('sign-in-box') do |id, via|
  = t('twitter_users.in_background.lets_sign_in')
  = link_to(t('twitter_users.in_background.do_sign_in'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_info_box('retry-later-box') do |id, via|
  = t('twitter_users.in_background.failed')
  = link_to(t('twitter_users.in_background.retry'), sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via)), class: button_classes)

= alert_info_box('too-many-searches-box') do |id, via|
  - sign_in_url = sign_in_path(via: via, redirect_path: timeline_path(twitter_user, via: via))
  - pricing_url = pricing_path(via: via)
  - support_url = pricing_path(via: via, anchor: 'enterprise-plan')
  = search_count_limitation_too_many_searches_message(sign_in_url, pricing_url, support_url)

= javascript_pack_tag 'message_box'
= javascript_pack_tag 'bg_update'

:javascript
  var signedIn = #{user_signed_in?};
  var crawler = #{from_crawler?};
  var os = '#{request.os}';
  var osVersion = '#{request.os_version}';
  var removePage = #{%w(unfriends unfollowers blocking_or_blocked).include?(controller_name)};
  var viaDM = #{via_dm?};
  var profileNotFound = #{twitter_user.profile_not_found?};
  var tooShortCreateInterval = #{twitter_user.too_short_create_interval?};
  var nextCreationTimeMessage = '#{next_creation_message(twitter_user)}';
  var requestToUpdate = #{switch_to_request?(twitter_user)};
  var eventCategory = '#{controller_name}##{action_name}';

  var urls = {
    twitter_users_changes: '#{twitter_users_changes_path(uid: twitter_user.uid)}',
    twitter_user: '#{twitter_user_path(uid: twitter_user.uid, via: current_via('update_box'))}',
    follow: '#{follow_path(via: current_via('follow_box'))}',
    twitter_users: "#{twitter_users_path(via: current_via('background_update'))}",
    account_status: "#{account_status_path(uid: twitter_user.uid)}"
  };

  var twitterUser = {
    userId: '#{current_user&.id}',
    uid: '#{twitter_user.uid}',
    screenName: "#{twitter_user.screen_name}",
    createdAt: #{twitter_user.created_at.to_i}
  };

  var messageBox;

  $(function () {
    if (profileNotFound) {
      return;
    }

    // TODO Remove
    messageBox = new MessageBox(requestToUpdate, nextCreationTimeMessage);

    if (!signedIn) {
      if (removePage) {
        messageBox.show('accurateCounting');
      } else if (viaDM) {
        messageBox.show('viaDM');
      } else if (!crawler) {
        messageBox.show('signIn');
      } else {
        // Maybe crawler
      }

      return;
    }

    var options = {url: urls.follow};
    new EgotterFollowerDetector(options).detect(function () {
      if (tooShortCreateInterval) {
        console.warn("Don't start polling since the create interval is too short.");
        return;
      }

      var options = {
        url: urls.twitter_users,
        twitterUser: twitterUser
      };
      new CreateTwitterUserRequest(options).perform(function () {

        var options = {
          url: urls.twitter_user,
          changesPath: urls.twitter_users_changes,
          twitterUser: twitterUser
        };
        new Polling(options).start();
        ToastMessage.show('#{t('twitter_users.in_background.updating_html', user: twitter_user.screen_name)}');
      });
    });

    var options = {
      force: true,
      unauthorizedMessage: "#{t('after_sign_in.unauthorized_detected_with_count', seconds: 3)}",
      blockedMessage: "#{t('after_sign_in.blocked_detected_with_count', seconds: 3)}",
      url: urls.account_status,
      unauthorizedRedirectPath: "#{root_path(via: current_via('unauthorized_detected'))}",
      blockedRedirectPath: "#{root_path(via: current_via('blocked_detected'))}",
      eventCategory: eventCategory,
      eventLabel: JSON.stringify(twitterUser)
    };
    new UnauthorizedDetector(options).detect();

    if (!crawler) {
      var options = {
        force: true,
        message: '#{t('before_sign_in.secret_mode_detected_with_count', seconds: 3)}',
        redirectPath: "#{root_path(via: current_via('secret_mode_detected')).html_safe}",
        allowCognite: #{ENV['ALLOW_COGNITE'] == '1'},
        signedIn: signedIn,
        os: os,
        osVersion: osVersion,
        eventCategory: eventCategory,
        eventLabel: JSON.stringify(twitterUser)
      };
      new SecretModeDetector(options).detect();

      var options = {
        force: true,
        message: '#{t('before_sign_in.ad_blocker_detected_with_count', seconds: 3)}',
        redirectPath: "#{root_path(via: current_via('ad_blocker_detected')).html_safe}",
        eventCategory: eventCategory,
        eventLabel: JSON.stringify(twitterUser)
      };
      new AdBlockDetector(options).detect();
    }
  });
