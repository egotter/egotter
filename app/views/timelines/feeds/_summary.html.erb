<% via = current_via('summary_on_timeline') %>
<% items = [
  ['one_sided_friends', t('.one_sided_friends')],
  ['one_sided_followers', t('.one_sided_followers')],
  ['mutual_friends', t('.mutual_friends')],
  ['inactive_friends', t('.inactive_friends')],
  ['inactive_followers', t('.inactive_followers')],
  ['unfriends', t('.unfriends')],
  ['unfollowers', t('.unfollowers')],
  ['mutual_unfriends', t('.mutual_unfriends')],
  ['blockers', t('.blockers')],
  ['muters', t('.muters')],
] %>

<div class="summary-on-timeline">
  <div class="list-group">
    <% items.each do |name, title| %>
      <li class="list-group-item">
        <div class="d-flex justify-content-between align-items-center">
          <div><%= link_to title, "#feed-#{name}", onclick: "itemOnSummaryClicked(this, '#{name}')" %></div>
          <div>
            <%= link_to "#feed-#{name}", onclick: "itemOnSummaryClicked(this, '#{name}')" do %>
              <span class="message-container <%= name %>"><%= t('.analyzing') %></span>
            <% end %>
            <span class="zero-reason <%= name %> small" style="display: none;">
              <%= link_to '#', class: 'zero-reason-link' do %>
                <i class="far fa-question-circle"></i>
                <%= t('.reason') %>
              <% end %>
            </span>
          </div>
        </div>
      </li>
    <% end %>
  </div>
</div>

<script>
  function itemOnSummaryClicked(elem, name) {
    var count = $(elem).find('.count').text();
    trackPageEvents('TimelinePage events', 'Summary ' + name + ' clicked', {count: count});
  }

  function showZeroReasonAlert() {
    var message = '<%= t('.detailed_description') %>';
    window.alert(message);
    return false;
  }

  $(function () {
    var url = '<%= raw api_v1_summaries_path(uid: twitter_user.uid, via: via) %>';
    var names = <%= raw items.map(&:first).to_json %>;
    var parent = $('.summary-on-timeline');

    $('.zero-reason-link').on('click', showZeroReasonAlert);

    function updateView(res) {
      var zeroMessage = '<%= t('.zero') %>';
      var unit = '<%= t('.unit') %>';

      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        var count = res[name];

        var container = parent.find('.message-container.' + name);
        container.empty();

        if (count <= 0) {
          container.text(zeroMessage).addClass('text-muted');
          parent.find('.zero-reason.' + name).show();
        } else {
          container.text(count + unit);
        }
      }
    }

    function updateErrorView(xhr, textStatus, errorThrown) {
      var message = '<%= t('.error') %>';
      parent.find('.message-container').empty().text(message).addClass('text-muted');
      showErrorMessage(xhr, textStatus, errorThrown);
    }

    function createFetcher() {
      var retry = 0;

      function fetch() {
        $.getJSON(url).done(function (res) {
          logger.log('summary', 'loaded');
          updateView(res);
          trackPageEvents('TimelinePage events', 'Summary loaded', {response: res});
        }).fail(function (xhr, textStatus, errorThrown) {
          logger.warn('summary', 'fetch failed', xhr.status);
          if (xhr.status === 404) {
            if ((retry++) < 3) {
              logger.log('summary', 'retry', retry);
              setTimeout(fetch, 3000);
            } else {
              logger.warn('summary', 'Retry exhausted');
              updateErrorView(xhr, textStatus, errorThrown);
            }
          } else {
            updateErrorView(xhr, textStatus, errorThrown);
          }
        });
      }

      return {fetch: fetch};
    }

    createFetcher().fetch();
  });
</script>
